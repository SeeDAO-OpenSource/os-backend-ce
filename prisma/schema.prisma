// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

// 示例数据结构
model Item {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model Activity {
  id           String @id @default(cuid())
  subject      String
  checkinCode  String
  created      Int
  description  String
  location     String
  hosts        String
  guests       String
  recorders    String
  start        Int
  end          Int
  organization String
  participants String
  applicants   String
}

model Budget {
  id           String  @id @default(cuid())
  subject      String
  season       String
  description  String?
  proposal     String?
  pointRecords Point[]
}

model File {
  id       Int      @id @default(autoincrement())
  name     String
  isFolder Boolean
  status   String
  url      String
  filetype String
  tags     String
  date     DateTime
  files    File[]   @relation("ParentChildFiles")
  parent   File?    @relation("ParentChildFiles", fields: [parentId], references: [id])
  parentId Int?
  password String?
}

model Point {
  id             String   @id @default(cuid())
  creatorId      String
  beneficiaryId  String?
  wallet         String?
  notes          String?
  event          String?
  status         String
  valueClaim     Int
  valueFulfilled Int
  datetime       DateTime
  budget         Budget?  @relation(fields: [budgetId], references: [id])
  budgetId       String?
  links          Link[]   @relation("PointToLink")
  transactions   String
}

model Link {
  id      String @id @default(cuid())
  title   String
  url     String
  point   Point  @relation(name: "PointToLink", fields: [pointId], references: [id])
  pointId String
}

model Event {
  id          Int              @id @default(autoincrement())
  type        String?
  poap        String?
  reviews     Review[]         @relation("EventReviews")
  leads       Lead[]           @relation("EventLeads")
  links       EventLink[]
  recordings  EventRecording[]
  password    String?
  location    String?
  where       String?
  episode     String?
  image       String?
  season      String?
  series      String?
  duration    Int?
  start       DateTime
  description String?
  title       String?
}

model EventLink {
  id      Int    @id @default(autoincrement())
  value   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int
}

model EventRecording {
  id      Int    @id @default(autoincrement())
  value   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int
}

model Lead {
  id        Int     @id @default(autoincrement())
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  stage     String?
  event     Event   @relation("EventLeads", fields: [eventId], references: [id])
  eventId   Int
}

model Channel {
  id    Int          @id @default(autoincrement())
  name  String
  tags  ChannelTag[]
  leads Lead[]
}

model ChannelTag {
  id        Int     @id @default(autoincrement())
  value     String
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
}

model Review {
  id               Int     @id @default(autoincrement())
  tags             Tag[]
  comment          String?
  targetCollection String?
  targetId         Int?
  max              Int?
  min              Int?
  value            Int?
  event            Event   @relation("EventReviews", fields: [eventId], references: [id])
  eventId          Int
  toId             String // Update this to match the User model's id type
  fromId           String // Update this to match the User model's id type
}

model Tag {
  id       Int    @id @default(autoincrement())
  name     String @unique
  value    String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId Int
}

model Notification {
  id      Int    @id @default(autoincrement())
  wallet  String
  type    String
  email   String
  created Int
  data    String
}

model Proposal {
  id           String   @id @default(cuid())
  proposerId   String
  datetime     DateTime
  title        String
  content      String
  tags         String
  category     String
  links        String
  type         String
  status       String
  sip          String
  main_poll    String
  poll         String
  budget       Int
  down_payment Int
  subpolls     String
}

model User {
  id        String     @id
  wallet    String     @unique
  email     String?
  nickname  String?
  bio       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRole  UserRole[]
}

model UserRole {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  expiredAt DateTime?
  createdAt DateTime  @default(now())

  @@id([userId, roleId])
}

model Role {
  id       String     @id @default(cuid())
  name     String
  UserRole UserRole[]

  @@index([name])
}

model PermissionGrant {
  id          String    @id @default(cuid())
  // 权限Code
  name        String
  // 校验Provider Name
  providerName    String
  // 校验Provider key
  providerKey String
  // 过期时间，如果为空则永不过期
  expiredAt   DateTime?

  @@unique([name, providerName, providerKey])
}

model SubDIDMintRecord {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  subDID    String
  timestamp DateTime @default(now())
  verifier  String?
}

model SubDIDCdKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  isValid   Boolean
  address   String? // 可选字段，使用 '?' 标记
  subDID    String? // 可选字段，使用 '?' 标记
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SGNMintRecord {
  id        Int      @id @default(autoincrement())
  address   String
  tokenId   Int      @unique
  subDID    String
  timestamp DateTime @default(now())
  contract  String

  @@index([subDID])
  @@index([timestamp])
  @@index([contract])
}

model InfraTool {
  id          String   @id
  name        String
  type        String
  logo        String?
  description String?
  url         String?
  createdAt   DateTime @default(now())
  createdBy   String?

  @@index([name])
  @@index([type])
}
