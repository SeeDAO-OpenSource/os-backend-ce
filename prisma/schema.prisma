// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 }
 
  
//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}


// 示例数据结构
model Item {
  id          Int     @id @default(autoincrement())
  name        String
  description String
}

model Activity {
  id           String    @id @default(cuid())
  subject      String
  checkinCode  String
  created      Int
  description  String
  location     String
  hosts        String
  guests       String
  recorders    String
  start        Int
  end          Int
  organization String
  participants String
  applicants   String
}

model Budget {
  id          String   @id @default(cuid())
  subject     String
  season      String
  description String?
  proposal    String?
  pointRecords Point[] 
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  isFolder  Boolean
  status    String
  url       String
  filetype  String
  tags      String
  date      DateTime
  files     File[]   @relation("ParentChildFiles")
  parent    File?    @relation("ParentChildFiles", fields: [parentId], references: [id])
  parentId  Int?
  password  String?
}

model Point {
  id              String   @id @default(cuid())
  creator         User     @relation(name: "CreatorPoints", fields: [creatorId], references: [id])
  creatorId       String
  beneficiary     User     @relation(name: "BeneficiaryPoints",fields: [beneficiaryId], references: [id])
  beneficiaryId   String
  wallet          String?
  notes           String?
  event           String?
  status          String
  value_claim     Int
  value_fulfilled Int
  datetime        DateTime
  budget          Budget   @relation(fields: [budgetId], references: [id])
  budgetId        String
  links           String
  transactions    String
}


model Link {
  id    Int    @id @default(autoincrement())
  title String
  url   String
  roles Role[] @relation("RoleToLink")
  tags  Tag[]  @relation("TagToLink")
}


model Event {
  id            Int        @id @default(autoincrement())
  usersInvited  User[]     @relation("EventUsersInvited")
  rolesInvited  Role[]     @relation("EventRolesInvited")
  type          String?
  poap          String?
  reviews       Review[]   @relation("EventReviews")
  leads         Lead[]     @relation("EventLeads")
  attendees     User[]     @relation("EventAttendees")
  interested    User[]     @relation("EventInterested")
  contacts      User[]     @relation("EventContacts")
  guests        User[]     @relation("EventGuests")
  hosts         User[]     @relation("EventHosts")
  links         EventLink[]
  recordings    EventRecording[]  
  password      String?
  location      String?
  where         String?
  episode       String?
  image         String?
  season        String?
  series        String?
  duration      Int?
  start         DateTime
  description   String?
  title         String?
}

model EventLink {
  id      Int    @id @default(autoincrement())
  value   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int
}

model EventRecording {
  id      Int    @id @default(autoincrement())
  value   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int
}

model Lead {
  id        Int      @id @default(autoincrement())
  channel     Channel     @relation(fields: [channelId], references: [id])
  channelId   Int
  stage       String?
  referrers   User[]      @relation("LeadReferrers")
  event       Event       @relation("EventLeads", fields: [eventId], references: [id])
  eventId     Int
}

model Channel {
  id    Int    @id @default(autoincrement())
  name  String
  tags    ChannelTag[]
  leads Lead[]
}

model ChannelTag {
  id        Int      @id @default(autoincrement())
  value     String
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId Int
}


model Review {
  id              Int    @id @default(autoincrement())
  tags            Tag[]
  comment         String?
  targetCollection String?
  targetId        Int?
  max             Int?
  min             Int?
  value          Int?
  event          Event     @relation("EventReviews", fields: [eventId], references: [id])
  eventId        Int
  to             User      @relation("ReviewTo", fields: [toId], references: [id])
  toId           String    // Update this to match the User model's id type
  from           User      @relation("ReviewFrom", fields: [fromId], references: [id])
  fromId         String    // Update this to match the User model's id type
}

model Tag {
  id      Int      @id @default(autoincrement())
  name  String @unique
  value   String
  links Link[] @relation("TagToLink")
  review  Review   @relation(fields: [reviewId], references: [id])
  reviewId Int
}


model Notification {
  id      Int      @id @default(autoincrement())
  wallet  String
  type    String
  email   String
  created Int
  data    String
}

model Proposal {
  id          String   @id @default(cuid())
  proposer    User     @relation(fields: [proposerId], references: [id])
  proposerId  String
  datetime    DateTime
  title       String
  content     String
  tags        String
  category    String
  links       String
  type        String
  status      String
  sip         String
  main_poll   String
  poll        String
  budget      Int
  down_payment Int
  subpolls    String
}


model User {
  id              String   @id @default(cuid())
  wallet          String   @unique
  email           String?
  nickname        String?
  temporaryEmail  String?
  verifyCode      String?
  sysuser         SystemUser? @relation("UserSystemUser", fields: [sysuserId], references: [id])
  sysuserId       String? @unique
  authGoogle      AuthGoogle?
  authTwitter     AuthTwitter?
  authDiscord     AuthDiscord?
  authGithub      AuthGithub?
  authTelegram    AuthTelegram?
  authWechat      AuthWechat?
  authZoom        AuthZoom?
  proposals       Proposal[] 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdPoints  Point[]   @relation("CreatorPoints")
  receivedPoints Point[]   @relation("BeneficiaryPoints")

  invitedEvents  Event[]   @relation("EventUsersInvited")
  attendeeEvents Event[]   @relation("EventAttendees")
  interestedEvents Event[] @relation("EventInterested")
  contactEvents   Event[]  @relation("EventContacts")
  guestEvents     Event[]  @relation("EventGuests")
  hostEvents      Event[]  @relation("EventHosts")
  referrerLeads   Lead[]   @relation("LeadReferrers")
  reviewsReceived Review[] @relation("ReviewTo")
  reviewsGiven    Review[] @relation("ReviewFrom")
}

model SystemUser {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String?
  user      User? @relation("UserSystemUser")
  roles     Role[]
}

model AuthGoogle {
  id     String @id @default(cuid())
  userId String  @unique
  name   String?
  email  String?
  user   User   @relation(fields: [userId], references: [id])
}

model AuthTwitter {
  id       String @id @default(cuid())
  userId   String  @unique
  name     String?
  handle   String?
  user     User   @relation(fields: [userId], references: [id])
}

model AuthDiscord {
  id     String @id @default(cuid())
  userId String  @unique
  name   String?  
  avatar String? 
  user   User   @relation(fields: [userId], references: [id])
}

model AuthGithub {
  id       String @id @default(cuid())
  userId   String  @unique
  username String?
  name     String? 
  user     User   @relation(fields: [userId], references: [id])
}

model AuthTelegram {
  id      String @id @default(cuid())
  userId  String  @unique
  handle  String?
  name    String?  
  user    User   @relation(fields: [userId], references: [id])
}

model AuthWechat {
  id     String @id @default(cuid())
  userId String  @unique
  name   String?  
  user   User   @relation(fields: [userId], references: [id])
}

model AuthZoom {
  id     String @id @default(cuid())
  userId String  @unique
  name   String?
  email  String?
  user   User   @relation(fields: [userId], references: [id])
}


model Role {
  id           String @id @default(cuid())
  name         String
  organization String
  rules   String
  sysuser SystemUser[]
  authorities  String
  email        String     @unique
  created      Int
  data         String
  links Link[] @relation("RoleToLink")
  invitedEvents  Event[]   @relation("EventRolesInvited")

}


model SubDIDMintRecord {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  subDID    String
  timestamp DateTime @default(now())
  verifier  String?
}

model SubDIDCdKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  isValid   Boolean
  address   String?  // 可选字段，使用 '?' 标记
  subDID    String?  // 可选字段，使用 '?' 标记
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}  

model SGNMintRecord {
  id        Int      @id @default(autoincrement())
  address   String
  tokenId   Int      @unique
  subDID    String
  timestamp DateTime @default(now())
  contract  String

  @@index([subDID])
  @@index([timestamp])
  @@index([contract])
}


model InfraTool {
  id String @id
  name String
  type String
  logo String?
  description String?
  url String?
  createdAt DateTime @default(now())
  createdBy String? 

  @@index([name])
  @@index([type])
}