// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

// 示例数据结构
model Item {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String
}

model Activity {
  id           String @id @default(uuid()) @map("_id")
  subject      String
  checkinCode  String
  created      Int
  description  String
  location     String
  hosts        String
  guests       String
  recorders    String
  start        Int
  end          Int
  organization String
  participants String
  applicants   String
}



// model File {
//   id           String @id @default(uuid()) @map("_id")
//   name     String
//   isFolder Boolean
//   status   String
//   url      String
//   filetype String
//   tags     String
//   date     DateTime
//   files    File[]   @relation("ParentChildFiles")
//   parent   File?    @relation("ParentChildFiles", fields: [parentId], references: [id])
//   parentId Int?
//   password String?
// }

// model Point {
//   id           String @id @default(uuid()) @map("_id")
//   creatorId      String
//   beneficiaryId  String?
//   wallet         String?
//   notes          String?
//   event          String?
//   status         String
//   valueClaim     Int
//   valueFulfilled Int
//   datetime       DateTime
//   budget         Budget?  @relation(fields: [budgetId], references: [id])
//   budgetId       String?
//   links          Link[]   @relation("PointToLink")
//   transactions   String
// }



// model Event {
//   id           String @id @default(uuid()) @map("_id")
//   type        String?
//   poap        String?
//   reviews     Review[]         @relation("EventReviews")
//   leads       Lead[]           @relation("EventLeads")
//   links       EventLink[]
//   recordings  EventRecording[]
//   password    String?
//   location    String?
//   where       String?
//   episode     String?
//   image       String?
//   season      String?
//   series      String?
//   duration    Int?
//   start       DateTime
//   description String?
//   title       String?
// }

// model EventLink {
//   id           String @id @default(uuid()) @map("_id")
//   value   String
//   event   Event  @relation(fields: [eventId], references: [id])
//   eventId Int
// }

// model EventRecording {
//   id           String @id @default(uuid()) @map("_id")
//   value   String
//   event   Event  @relation(fields: [eventId], references: [id])
//   eventId Int
// }

// model Lead {
//   id           String @id @default(uuid()) @map("_id")
//   channel   Channel @relation(fields: [channelId], references: [id])
//   channelId Int
//   stage     String?
//   event     Event   @relation("EventLeads", fields: [eventId], references: [id])
//   eventId   Int
// }

// model Channel {
//   id    Int          @id @default(autoincrement())
//   name  String
//   tags  ChannelTag[]
//   leads Lead[]
// }

// model ChannelTag {
//   id        Int     @id @default(autoincrement())
//   value     String
//   channel   Channel @relation(fields: [channelId], references: [id])
//   channelId Int
// }

// model Review {
//   id               Int     @id @default(autoincrement())
//   tags             Tag[]
//   comment          String?
//   targetCollection String?
//   targetId         Int?
//   max              Int?
//   min              Int?
//   value            Int?
//   event            Event   @relation("EventReviews", fields: [eventId], references: [id])
//   eventId          Int
//   toId             String // Update this to match the User model's id type
//   fromId           String // Update this to match the User model's id type
// }

// model Tag {
//   id       Int    @id @default(autoincrement())
//   name     String @unique
//   value    String
//   review   Review @relation(fields: [reviewId], references: [id])
//   reviewId Int
// }

// model Notification {
//   id      Int    @id @default(autoincrement())
//   wallet  String
//   type    String
//   email   String
//   created Int
//   data    String
// }


model Invoice {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  type          String
  registrant    String
  beneficiary   String
  subject       String
  note          String
  value_claim   String
  value_fulfilled String
  register_date String
  status        String
  links         String[]
  budget        String
  transactions  String[]

}

model Budget {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  related      String?
  proposal     String?
  asset        String?
  name         String
  cap          String?
  statement    String?
  createdAt    DateTime @default(now())

}

model Asset {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  tokens       String[]
  name         String
}

model Token {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  related      Int
  name         String
  type_chain   String
  type_token   String
  address      String
  token_id     String
}


model Task {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  type            String
  status          String
  assigned_to     String
  subtasks        String[]
  creator         String
  reviewer        String
  evaluation      String
  links           String[]
  rewards         String[]
}

model Bounty {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  successors      String[]
  candidates      String
  tasks           String[]
}

model Link {
  id           String @id @default(uuid()) @map("_id")
  title   String
  url     String
  roles   String[]
}

model Proposal {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  members      String[]
  title        String
  body         String
  status       String
  tags         String[]
  category     String
  params       String[]
  polls        String[]
  links        String[]
  onchain_history    String[]
  onchain_call String?
  budget       String[]
  empowerments String[]
  project      String?
  createdAt    DateTime @default(now())
  author       String?

}

// model ProposalCategory {
//   id           String @id @default(uuid()) @map("_id")
//   name         String
//   tags         String[]
//   who_view     Role[] @relation("ProposalCategoryWhoView")
//   who_propose  Role[] @relation("ProposalCategoryWhoPropose")
//   who_comment  Role[] @relation("ProposalCategoryWhoComment")
//   who_admin    Role[] @relation("ProposalCategoryWhoAdmin")
// }

// model GovernParameter {
//   id           String @id @default(uuid()) @map("_id")
//   name         String
//   description  String
//   value        String
//   options      String[]
//   apply_roles    Role[] @relation("GovernParameterApplyRoles")
//   apply_projects Role[] @relation("GovernParameterApplyProjects")
//   apply_proposals  Proposal[]
//   apply_users      User[]
// }


// model Poll {
//   id           String @id @default(uuid()) @map("_id")
//   name         String
//   choices      String[]
//   scores       Int[]
//   time_start   String
//   time_end     String
//   strategy     String
//   votes        Vote[]
//   who_vote     Role[] 
//   who_admin    Role[] 

// }

// model Vote {
//   id           String @id @default(uuid()) @map("_id")
//   choice       String
//   voter        User
// }

// model Empowerment {
//   id           String @id @default(uuid()) @map("_id")
//   name         String
//   description  String
//   target       Role[]
//   time_start   String
//   time_end     String
//   quota        String
// }


// model Project {
//   id          String @id @default(uuid()) @map("_id")
//   name        String
//   description String
//   roles      Role[]
//   proposals   Proposal[]
//   // tasks      Task[]
//   // bounties    bounty[]
//   members     User[]
// }


model User {
  id        String @id @default(uuid()) @map("_id")
  wallet    String     @unique
  email     String?
  nickname  String?
  bio       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRole  UserRole[]
}

model UserRole {
  id  String @id @default(uuid()) @map("_id")
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  expiredAt DateTime?
  createdAt DateTime  @default(now())

  @@unique([userId, roleId])
}

model Role {
  id        String @id @default(uuid()) @map("_id")
  name     String
  UserRole UserRole[]

  @@index([name])
}

model PermissionGrant {
  id        String @id @default(uuid()) @map("_id")
  // 权限Code
  name        String
  // 校验Provider Name
  providerName    String
  // 校验Provider key
  providerKey String
  // 过期时间，如果为空则永不过期
  expiredAt   DateTime?

  @@unique([name, providerName, providerKey])
}

model SubDIDMintRecord {
  id        String @id @default(uuid()) @map("_id")
  address   String   @unique
  subDID    String
  timestamp DateTime @default(now())
  verifier  String?
}

model SubDIDCdKey {
  id        String @id @default(uuid()) @map("_id")
  key       String   @unique
  isValid   Boolean
  address   String? // 可选字段，使用 '?' 标记
  subDID    String? // 可选字段，使用 '?' 标记
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SGNMintRecord {
  id        String @id @default(uuid()) @map("_id")
  address   String
  tokenId   Int      @unique
  subDID    String
  timestamp DateTime @default(now())
  contract  String

  @@index([subDID])
  @@index([timestamp])
  @@index([contract])
}

model InfraTool {
  id          String @id @default(uuid()) @map("_id")
  name        String
  type        String
  logo        String?
  description String?
  url         String?
  createdAt   DateTime @default(now())
  createdBy   String?

  @@index([name])
  @@index([type])
}
