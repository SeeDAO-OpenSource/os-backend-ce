/* tslint:disable */
/* eslint-disable */
/**
 * SeeDao-OS-API
 * SeeDao-OS-API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaginatedResponseOfToolDto } from '../types';
// @ts-ignore
import { ToolCreateInput } from '../types';
// @ts-ignore
import { ToolDto } from '../types';
// @ts-ignore
import { ToolUpdateInput } from '../types';
/**
 * InfraToolsApi - axios parameter creator
 * @export
 */
export const InfraToolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ToolCreateInput} toolCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerCreate: async (toolCreateInput: ToolCreateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolCreateInput' is not null or undefined
            assertParamExists('toolControllerCreate', 'toolCreateInput', toolCreateInput)
            const localVarPath = `/infra-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toolCreateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('toolControllerDelete', 'id', id)
            const localVarPath = `/infra-tools/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} page 
         * @param {number} [limit] 
         * @param {boolean} [includeTotal] 
         * @param {string} [order] id,-name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetList: async (page: string, limit?: number, includeTotal?: boolean, order?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('toolControllerGetList', 'page', page)
            const localVarPath = `/infra-tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (includeTotal !== undefined) {
                localVarQueryParameter['includeTotal'] = includeTotal;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ToolUpdateInput} toolUpdateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerUpdate: async (id: string, toolUpdateInput: ToolUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('toolControllerUpdate', 'id', id)
            // verify required parameter 'toolUpdateInput' is not null or undefined
            assertParamExists('toolControllerUpdate', 'toolUpdateInput', toolUpdateInput)
            const localVarPath = `/infra-tools/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toolUpdateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfraToolsApi - functional programming interface
 * @export
 */
export const InfraToolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InfraToolsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ToolCreateInput} toolCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerCreate(toolCreateInput: ToolCreateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerCreate(toolCreateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} page 
         * @param {number} [limit] 
         * @param {boolean} [includeTotal] 
         * @param {string} [order] id,-name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerGetList(page: string, limit?: number, includeTotal?: boolean, order?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseOfToolDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerGetList(page, limit, includeTotal, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ToolUpdateInput} toolUpdateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolControllerUpdate(id: string, toolUpdateInput: ToolUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolControllerUpdate(id, toolUpdateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InfraToolsApi - factory interface
 * @export
 */
export const InfraToolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InfraToolsApiFp(configuration)
    return {
        /**
         * 
         * @param {ToolCreateInput} toolCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerCreate(toolCreateInput: ToolCreateInput, options?: any): AxiosPromise<ToolDto> {
            return localVarFp.toolControllerCreate(toolCreateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerDelete(id: string, options?: any): AxiosPromise<ToolDto> {
            return localVarFp.toolControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} page 
         * @param {number} [limit] 
         * @param {boolean} [includeTotal] 
         * @param {string} [order] id,-name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerGetList(page: string, limit?: number, includeTotal?: boolean, order?: string, options?: any): AxiosPromise<PaginatedResponseOfToolDto> {
            return localVarFp.toolControllerGetList(page, limit, includeTotal, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ToolUpdateInput} toolUpdateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolControllerUpdate(id: string, toolUpdateInput: ToolUpdateInput, options?: any): AxiosPromise<ToolDto> {
            return localVarFp.toolControllerUpdate(id, toolUpdateInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfraToolsApi - object-oriented interface
 * @export
 * @class InfraToolsApi
 * @extends {BaseAPI}
 */
export class InfraToolsApi extends BaseAPI {
    /**
     * 
     * @param {ToolCreateInput} toolCreateInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfraToolsApi
     */
    public toolControllerCreate(toolCreateInput: ToolCreateInput, options?: AxiosRequestConfig) {
        return InfraToolsApiFp(this.configuration).toolControllerCreate(toolCreateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfraToolsApi
     */
    public toolControllerDelete(id: string, options?: AxiosRequestConfig) {
        return InfraToolsApiFp(this.configuration).toolControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} page 
     * @param {number} [limit] 
     * @param {boolean} [includeTotal] 
     * @param {string} [order] id,-name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfraToolsApi
     */
    public toolControllerGetList(page: string, limit?: number, includeTotal?: boolean, order?: string, options?: AxiosRequestConfig) {
        return InfraToolsApiFp(this.configuration).toolControllerGetList(page, limit, includeTotal, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {ToolUpdateInput} toolUpdateInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfraToolsApi
     */
    public toolControllerUpdate(id: string, toolUpdateInput: ToolUpdateInput, options?: AxiosRequestConfig) {
        return InfraToolsApiFp(this.configuration).toolControllerUpdate(id, toolUpdateInput, options).then((request) => request(this.axios, this.basePath));
    }
}
