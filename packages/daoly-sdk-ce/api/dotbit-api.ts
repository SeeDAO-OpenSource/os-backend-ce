/* tslint:disable */
/* eslint-disable */
/**
 * SeeDao-OS-API
 * SeeDao-OS-API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DotbitControllerConsumeKeyRequest } from '../types';
// @ts-ignore
import { DotbitControllerMintRequest } from '../types';
// @ts-ignore
import { DotbitControllerMintSignMsgRequest } from '../types';
// @ts-ignore
import { InsertSGNMintRecordDto } from '../types';
// @ts-ignore
import { SGNMintRecordModel } from '../types';
// @ts-ignore
import { SubDIDCdKeyDto } from '../types';
// @ts-ignore
import { SubDIDMintRecordDto } from '../types';
/**
 * DotbitApi - axios parameter creator
 * @export
 */
export const DotbitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mint a SubDID
         * @param {string} address 
         * @param {string} subDID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerCheckSubDID: async (address: string, subDID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('dotbitControllerCheckSubDID', 'address', address)
            // verify required parameter 'subDID' is not null or undefined
            assertParamExists('dotbitControllerCheckSubDID', 'subDID', subDID)
            const localVarPath = `/dotbit/subdid/check-valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (subDID !== undefined) {
                localVarQueryParameter['subDID'] = subDID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Consume a SubDID CD key
         * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerConsumeKey: async (dotbitControllerConsumeKeyRequest: DotbitControllerConsumeKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dotbitControllerConsumeKeyRequest' is not null or undefined
            assertParamExists('dotbitControllerConsumeKey', 'dotbitControllerConsumeKeyRequest', dotbitControllerConsumeKeyRequest)
            const localVarPath = `/dotbit/cdkey/consume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dotbitControllerConsumeKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary generate cdkeys
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGenerate: async (num: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'num' is not null or undefined
            assertParamExists('dotbitControllerGenerate', 'num', num)
            const localVarPath = `/dotbit/cdkey/generate/{num}`
                .replace(`{${"num"}}`, encodeURIComponent(String(num)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cdkey
         * @param {string} key 
         * @param {boolean} all 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetCdkey: async (key: string, all: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('dotbitControllerGetCdkey', 'key', key)
            // verify required parameter 'all' is not null or undefined
            assertParamExists('dotbitControllerGetCdkey', 'all', all)
            const localVarPath = `/dotbit/cdkey/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SubDIDMintRecord by address
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetSubDIDMintRecord: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('dotbitControllerGetSubDIDMintRecord', 'address', address)
            const localVarPath = `/dotbit/subdid/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if a token has been minted
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerHasMinted: async (tokenId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('dotbitControllerHasMinted', 'tokenId', tokenId)
            const localVarPath = `/dotbit/sgn/minted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = tokenId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Insert a new SGN Mint Record
         * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerInsertSgnMintRecord: async (insertSGNMintRecordDto: InsertSGNMintRecordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'insertSGNMintRecordDto' is not null or undefined
            assertParamExists('dotbitControllerInsertSgnMintRecord', 'insertSGNMintRecordDto', insertSGNMintRecordDto)
            const localVarPath = `/dotbit/sgn/insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertSGNMintRecordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mint a SubDID
         * @param {DotbitControllerMintRequest} dotbitControllerMintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMint: async (dotbitControllerMintRequest: DotbitControllerMintRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dotbitControllerMintRequest' is not null or undefined
            assertParamExists('dotbitControllerMint', 'dotbitControllerMintRequest', dotbitControllerMintRequest)
            const localVarPath = `/dotbit/subdid/mint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dotbitControllerMintRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign Message
         * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMintSignMsg: async (dotbitControllerMintSignMsgRequest: DotbitControllerMintSignMsgRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dotbitControllerMintSignMsgRequest' is not null or undefined
            assertParamExists('dotbitControllerMintSignMsg', 'dotbitControllerMintSignMsgRequest', dotbitControllerMintSignMsgRequest)
            const localVarPath = `/dotbit/subdid/mint-sign-msg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dotbitControllerMintSignMsgRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query a SGN Mint Record by tokenId
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerQuerySgnMintRecord: async (tokenId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('dotbitControllerQuerySgnMintRecord', 'tokenId', tokenId)
            const localVarPath = `/dotbit/sgn/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = tokenId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerify: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('dotbitControllerVerify', 'address', address)
            const localVarPath = `/dotbit/varify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary can-mint
         * @param {string} address 
         * @param {string} cdkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerifyCanMintSubDID: async (address: string, cdkey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('dotbitControllerVerifyCanMintSubDID', 'address', address)
            // verify required parameter 'cdkey' is not null or undefined
            assertParamExists('dotbitControllerVerifyCanMintSubDID', 'cdkey', cdkey)
            const localVarPath = `/dotbit/subdid/can-mint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (cdkey !== undefined) {
                localVarQueryParameter['cdkey'] = cdkey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DotbitApi - functional programming interface
 * @export
 */
export const DotbitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DotbitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mint a SubDID
         * @param {string} address 
         * @param {string} subDID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerCheckSubDID(address: string, subDID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerCheckSubDID(address, subDID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Consume a SubDID CD key
         * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest: DotbitControllerConsumeKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary generate cdkeys
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerGenerate(num: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerGenerate(num, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get cdkey
         * @param {string} key 
         * @param {boolean} all 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerGetCdkey(key: string, all: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubDIDCdKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerGetCdkey(key, all, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SubDIDMintRecord by address
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerGetSubDIDMintRecord(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubDIDMintRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerGetSubDIDMintRecord(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check if a token has been minted
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerHasMinted(tokenId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerHasMinted(tokenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Insert a new SGN Mint Record
         * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto: InsertSGNMintRecordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mint a SubDID
         * @param {DotbitControllerMintRequest} dotbitControllerMintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerMint(dotbitControllerMintRequest: DotbitControllerMintRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerMint(dotbitControllerMintRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign Message
         * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest: DotbitControllerMintSignMsgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query a SGN Mint Record by tokenId
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerQuerySgnMintRecord(tokenId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SGNMintRecordModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerQuerySgnMintRecord(tokenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerVerify(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerVerify(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary can-mint
         * @param {string} address 
         * @param {string} cdkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dotbitControllerVerifyCanMintSubDID(address: string, cdkey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dotbitControllerVerifyCanMintSubDID(address, cdkey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DotbitApi - factory interface
 * @export
 */
export const DotbitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DotbitApiFp(configuration)
    return {
        /**
         * 
         * @summary Mint a SubDID
         * @param {string} address 
         * @param {string} subDID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerCheckSubDID(address: string, subDID: string, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerCheckSubDID(address, subDID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Consume a SubDID CD key
         * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest: DotbitControllerConsumeKeyRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary generate cdkeys
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGenerate(num: number, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerGenerate(num, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cdkey
         * @param {string} key 
         * @param {boolean} all 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetCdkey(key: string, all: boolean, options?: any): AxiosPromise<SubDIDCdKeyDto> {
            return localVarFp.dotbitControllerGetCdkey(key, all, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SubDIDMintRecord by address
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetSubDIDMintRecord(address: string, options?: any): AxiosPromise<SubDIDMintRecordDto> {
            return localVarFp.dotbitControllerGetSubDIDMintRecord(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if a token has been minted
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerHasMinted(tokenId: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.dotbitControllerHasMinted(tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Insert a new SGN Mint Record
         * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto: InsertSGNMintRecordDto, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mint a SubDID
         * @param {DotbitControllerMintRequest} dotbitControllerMintRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMint(dotbitControllerMintRequest: DotbitControllerMintRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerMint(dotbitControllerMintRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign Message
         * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest: DotbitControllerMintSignMsgRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query a SGN Mint Record by tokenId
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerQuerySgnMintRecord(tokenId: number, options?: any): AxiosPromise<SGNMintRecordModel> {
            return localVarFp.dotbitControllerQuerySgnMintRecord(tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerify(address: string, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerVerify(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary can-mint
         * @param {string} address 
         * @param {string} cdkey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerifyCanMintSubDID(address: string, cdkey: string, options?: any): AxiosPromise<void> {
            return localVarFp.dotbitControllerVerifyCanMintSubDID(address, cdkey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DotbitApi - object-oriented interface
 * @export
 * @class DotbitApi
 * @extends {BaseAPI}
 */
export class DotbitApi extends BaseAPI {
    /**
     * 
     * @summary Mint a SubDID
     * @param {string} address 
     * @param {string} subDID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerCheckSubDID(address: string, subDID: string, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerCheckSubDID(address, subDID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Consume a SubDID CD key
     * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest: DotbitControllerConsumeKeyRequest, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary generate cdkeys
     * @param {number} num 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerGenerate(num: number, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerGenerate(num, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cdkey
     * @param {string} key 
     * @param {boolean} all 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerGetCdkey(key: string, all: boolean, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerGetCdkey(key, all, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SubDIDMintRecord by address
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerGetSubDIDMintRecord(address: string, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerGetSubDIDMintRecord(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if a token has been minted
     * @param {number} tokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerHasMinted(tokenId: number, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerHasMinted(tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Insert a new SGN Mint Record
     * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto: InsertSGNMintRecordDto, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mint a SubDID
     * @param {DotbitControllerMintRequest} dotbitControllerMintRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerMint(dotbitControllerMintRequest: DotbitControllerMintRequest, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerMint(dotbitControllerMintRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign Message
     * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest: DotbitControllerMintSignMsgRequest, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query a SGN Mint Record by tokenId
     * @param {number} tokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerQuerySgnMintRecord(tokenId: number, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerQuerySgnMintRecord(tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerVerify(address: string, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerVerify(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary can-mint
     * @param {string} address 
     * @param {string} cdkey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    public dotbitControllerVerifyCanMintSubDID(address: string, cdkey: string, options?: AxiosRequestConfig) {
        return DotbitApiFp(this.configuration).dotbitControllerVerifyCanMintSubDID(address, cdkey, options).then((request) => request(this.axios, this.basePath));
    }
}
