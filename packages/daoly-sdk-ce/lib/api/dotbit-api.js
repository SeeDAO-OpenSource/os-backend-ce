"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SeeDao-OS-API
 * SeeDao-OS-API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DotbitApi = exports.DotbitApiFactory = exports.DotbitApiFp = exports.DotbitApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DotbitApi - axios parameter creator
 * @export
 */
var DotbitApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Mint a SubDID
         * @param {string} address
         * @param {string} subDID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerCheckSubDID: function (address, subDID, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerCheckSubDID', 'address', address);
                    // verify required parameter 'subDID' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerCheckSubDID', 'subDID', subDID);
                    localVarPath = "/dotbit/subdid/check-valid";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (address !== undefined) {
                        localVarQueryParameter['address'] = address;
                    }
                    if (subDID !== undefined) {
                        localVarQueryParameter['subDID'] = subDID;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Consume a SubDID CD key
         * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerConsumeKey: function (dotbitControllerConsumeKeyRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dotbitControllerConsumeKeyRequest' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerConsumeKey', 'dotbitControllerConsumeKeyRequest', dotbitControllerConsumeKeyRequest);
                    localVarPath = "/dotbit/cdkey/consume";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dotbitControllerConsumeKeyRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary generate cdkeys
         * @param {number} num
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGenerate: function (num, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'num' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerGenerate', 'num', num);
                    localVarPath = "/dotbit/cdkey/generate/{num}"
                        .replace("{".concat("num", "}"), encodeURIComponent(String(num)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get cdkey
         * @param {string} key
         * @param {boolean} all
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetCdkey: function (key, all, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'key' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerGetCdkey', 'key', key);
                    // verify required parameter 'all' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerGetCdkey', 'all', all);
                    localVarPath = "/dotbit/cdkey/{key}"
                        .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (all !== undefined) {
                        localVarQueryParameter['all'] = all;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get SubDIDMintRecord by address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetSubDIDMintRecord: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerGetSubDIDMintRecord', 'address', address);
                    localVarPath = "/dotbit/subdid/get";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (address !== undefined) {
                        localVarQueryParameter['address'] = address;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Check if a token has been minted
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerHasMinted: function (tokenId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'tokenId' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerHasMinted', 'tokenId', tokenId);
                    localVarPath = "/dotbit/sgn/minted";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tokenId !== undefined) {
                        localVarQueryParameter['tokenId'] = tokenId;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Insert a new SGN Mint Record
         * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerInsertSgnMintRecord: function (insertSGNMintRecordDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'insertSGNMintRecordDto' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerInsertSgnMintRecord', 'insertSGNMintRecordDto', insertSGNMintRecordDto);
                    localVarPath = "/dotbit/sgn/insert";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(insertSGNMintRecordDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Mint a SubDID
         * @param {DotbitControllerMintRequest} dotbitControllerMintRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMint: function (dotbitControllerMintRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dotbitControllerMintRequest' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerMint', 'dotbitControllerMintRequest', dotbitControllerMintRequest);
                    localVarPath = "/dotbit/subdid/mint";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dotbitControllerMintRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Sign Message
         * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMintSignMsg: function (dotbitControllerMintSignMsgRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dotbitControllerMintSignMsgRequest' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerMintSignMsg', 'dotbitControllerMintSignMsgRequest', dotbitControllerMintSignMsgRequest);
                    localVarPath = "/dotbit/subdid/mint-sign-msg";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dotbitControllerMintSignMsgRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query a SGN Mint Record by tokenId
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerQuerySgnMintRecord: function (tokenId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'tokenId' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerQuerySgnMintRecord', 'tokenId', tokenId);
                    localVarPath = "/dotbit/sgn/query";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tokenId !== undefined) {
                        localVarQueryParameter['tokenId'] = tokenId;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerify: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerVerify', 'address', address);
                    localVarPath = "/dotbit/varify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (address !== undefined) {
                        localVarQueryParameter['address'] = address;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary can-mint
         * @param {string} address
         * @param {string} cdkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerifyCanMintSubDID: function (address, cdkey, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerVerifyCanMintSubDID', 'address', address);
                    // verify required parameter 'cdkey' is not null or undefined
                    (0, common_1.assertParamExists)('dotbitControllerVerifyCanMintSubDID', 'cdkey', cdkey);
                    localVarPath = "/dotbit/subdid/can-mint";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (address !== undefined) {
                        localVarQueryParameter['address'] = address;
                    }
                    if (cdkey !== undefined) {
                        localVarQueryParameter['cdkey'] = cdkey;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DotbitApiAxiosParamCreator = DotbitApiAxiosParamCreator;
/**
 * DotbitApi - functional programming interface
 * @export
 */
var DotbitApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DotbitApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Mint a SubDID
         * @param {string} address
         * @param {string} subDID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerCheckSubDID: function (address, subDID, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerCheckSubDID(address, subDID, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Consume a SubDID CD key
         * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerConsumeKey: function (dotbitControllerConsumeKeyRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary generate cdkeys
         * @param {number} num
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGenerate: function (num, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerGenerate(num, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get cdkey
         * @param {string} key
         * @param {boolean} all
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetCdkey: function (key, all, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerGetCdkey(key, all, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get SubDIDMintRecord by address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetSubDIDMintRecord: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerGetSubDIDMintRecord(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Check if a token has been minted
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerHasMinted: function (tokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerHasMinted(tokenId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Insert a new SGN Mint Record
         * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerInsertSgnMintRecord: function (insertSGNMintRecordDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Mint a SubDID
         * @param {DotbitControllerMintRequest} dotbitControllerMintRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMint: function (dotbitControllerMintRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerMint(dotbitControllerMintRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Sign Message
         * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMintSignMsg: function (dotbitControllerMintSignMsgRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Query a SGN Mint Record by tokenId
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerQuerySgnMintRecord: function (tokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerQuerySgnMintRecord(tokenId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerify: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerVerify(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary can-mint
         * @param {string} address
         * @param {string} cdkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerifyCanMintSubDID: function (address, cdkey, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.dotbitControllerVerifyCanMintSubDID(address, cdkey, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DotbitApiFp = DotbitApiFp;
/**
 * DotbitApi - factory interface
 * @export
 */
var DotbitApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DotbitApiFp)(configuration);
    return {
        /**
         *
         * @summary Mint a SubDID
         * @param {string} address
         * @param {string} subDID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerCheckSubDID: function (address, subDID, options) {
            return localVarFp.dotbitControllerCheckSubDID(address, subDID, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Consume a SubDID CD key
         * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerConsumeKey: function (dotbitControllerConsumeKeyRequest, options) {
            return localVarFp.dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary generate cdkeys
         * @param {number} num
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGenerate: function (num, options) {
            return localVarFp.dotbitControllerGenerate(num, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get cdkey
         * @param {string} key
         * @param {boolean} all
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetCdkey: function (key, all, options) {
            return localVarFp.dotbitControllerGetCdkey(key, all, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get SubDIDMintRecord by address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerGetSubDIDMintRecord: function (address, options) {
            return localVarFp.dotbitControllerGetSubDIDMintRecord(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Check if a token has been minted
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerHasMinted: function (tokenId, options) {
            return localVarFp.dotbitControllerHasMinted(tokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Insert a new SGN Mint Record
         * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerInsertSgnMintRecord: function (insertSGNMintRecordDto, options) {
            return localVarFp.dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Mint a SubDID
         * @param {DotbitControllerMintRequest} dotbitControllerMintRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMint: function (dotbitControllerMintRequest, options) {
            return localVarFp.dotbitControllerMint(dotbitControllerMintRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sign Message
         * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerMintSignMsg: function (dotbitControllerMintSignMsgRequest, options) {
            return localVarFp.dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query a SGN Mint Record by tokenId
         * @param {number} tokenId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerQuerySgnMintRecord: function (tokenId, options) {
            return localVarFp.dotbitControllerQuerySgnMintRecord(tokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerify: function (address, options) {
            return localVarFp.dotbitControllerVerify(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary can-mint
         * @param {string} address
         * @param {string} cdkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dotbitControllerVerifyCanMintSubDID: function (address, cdkey, options) {
            return localVarFp.dotbitControllerVerifyCanMintSubDID(address, cdkey, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DotbitApiFactory = DotbitApiFactory;
/**
 * DotbitApi - object-oriented interface
 * @export
 * @class DotbitApi
 * @extends {BaseAPI}
 */
var DotbitApi = /** @class */ (function (_super) {
    __extends(DotbitApi, _super);
    function DotbitApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Mint a SubDID
     * @param {string} address
     * @param {string} subDID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerCheckSubDID = function (address, subDID, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerCheckSubDID(address, subDID, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Consume a SubDID CD key
     * @param {DotbitControllerConsumeKeyRequest} dotbitControllerConsumeKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerConsumeKey = function (dotbitControllerConsumeKeyRequest, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerConsumeKey(dotbitControllerConsumeKeyRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary generate cdkeys
     * @param {number} num
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerGenerate = function (num, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerGenerate(num, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get cdkey
     * @param {string} key
     * @param {boolean} all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerGetCdkey = function (key, all, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerGetCdkey(key, all, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get SubDIDMintRecord by address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerGetSubDIDMintRecord = function (address, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerGetSubDIDMintRecord(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Check if a token has been minted
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerHasMinted = function (tokenId, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerHasMinted(tokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Insert a new SGN Mint Record
     * @param {InsertSGNMintRecordDto} insertSGNMintRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerInsertSgnMintRecord = function (insertSGNMintRecordDto, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerInsertSgnMintRecord(insertSGNMintRecordDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Mint a SubDID
     * @param {DotbitControllerMintRequest} dotbitControllerMintRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerMint = function (dotbitControllerMintRequest, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerMint(dotbitControllerMintRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sign Message
     * @param {DotbitControllerMintSignMsgRequest} dotbitControllerMintSignMsgRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerMintSignMsg = function (dotbitControllerMintSignMsgRequest, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerMintSignMsg(dotbitControllerMintSignMsgRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query a SGN Mint Record by tokenId
     * @param {number} tokenId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerQuerySgnMintRecord = function (tokenId, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerQuerySgnMintRecord(tokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerVerify = function (address, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerVerify(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary can-mint
     * @param {string} address
     * @param {string} cdkey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DotbitApi
     */
    DotbitApi.prototype.dotbitControllerVerifyCanMintSubDID = function (address, cdkey, options) {
        var _this = this;
        return (0, exports.DotbitApiFp)(this.configuration).dotbitControllerVerifyCanMintSubDID(address, cdkey, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DotbitApi;
}(base_1.BaseAPI));
exports.DotbitApi = DotbitApi;
